# src/db.py
from __future__ import annotations
import psycopg2
import psycopg2.extras
import os
from .base import DATABASE_URL, log

if not DATABASE_URL:
    raise RuntimeError("DATABASE_URL env is missing (Neon connection string).")

def _conn():
    # sslmode=require برای Neon
    return psycopg2.connect(DATABASE_URL, sslmode="require", connect_timeout=10)

# ------- DDL safe -------
DDL = """
CREATE TABLE IF NOT EXISTS users (
    user_id      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    telegram_id  BIGINT NOT NULL,
    name         TEXT,
    active       BOOLEAN NOT NULL DEFAULT TRUE,
    created_at   TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- ایندکس یکتا روی telegram_id تا UPSERT کار کند
CREATE UNIQUE INDEX IF NOT EXISTS users_telegram_id_uidx ON users(telegram_id);

CREATE TABLE IF NOT EXISTS products (
    product_id    BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name          TEXT NOT NULL,
    price         INTEGER NOT NULL,
    photo_file_id TEXT,
    description   TEXT,
    created_at    TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
"""

def init_db():
    log.info("Initializing DB (safe)")
    with _conn() as cn:
        with cn.cursor() as cur:
            cur.execute(DDL)
    log.info("DB init done.")

# ------- helpers -------
def upsert_user(telegram_id: int, name: str):
    sql = """
    INSERT INTO users(telegram_id, name)
    VALUES (%s, %s)
    ON CONFLICT (telegram_id) DO UPDATE
        SET name = EXCLUDED.name
    RETURNING user_id, telegram_id, name, active;
    """
    with _conn() as cn:
        with cn.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cur:
            cur.execute(sql, (telegram_id, name))
            return cur.fetchone()

def create_product(name: str, price: int, photo_file_id: str | None, description: str | None):
    sql = """
    INSERT INTO products(name, price, photo_file_id, description)
    VALUES (%s, %s, %s, %s)
    RETURNING product_id;
    """
    with _conn() as cn:
        with cn.cursor() as cur:
            cur.execute(sql, (name, price, photo_file_id, description))
            pid = cur.fetchone()[0]
            return pid

def list_products(limit: int = 50):
    sql = """
    SELECT name, price, COALESCE(photo_file_id,''), COALESCE(description,'')
    FROM products
    ORDER BY product_id DESC
    LIMIT %s;
    """
    with _conn() as cn:
        with cn.cursor() as cur:
            cur.execute(sql, (limit,))
            return cur.fetchall()
