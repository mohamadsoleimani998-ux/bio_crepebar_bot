from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from telegram.constants import ParseMode

from .base import *
from . import db

# =========================
# ⁄©€åÿ®Ÿàÿ±ÿØ ÿßÿµŸÑ€å
# =========================
MAIN_KB = ReplyKeyboardMarkup(
    [
        [KeyboardButton("ŸÖŸÜŸà üç¨"), KeyboardButton("ÿ≥ŸÅÿßÿ±ÿ¥ üßæ")],
        [KeyboardButton("⁄©€åŸÅ ŸæŸàŸÑ üëõ"), KeyboardButton("ÿ®ÿßÿ≤€å üéÆ")],
        [KeyboardButton("ÿßÿ±ÿ™ÿ®ÿßÿ∑ ÿ®ÿß ŸÖÿß ‚òéÔ∏è"), KeyboardButton("ÿ±ÿßŸáŸÜŸÖÿß ‚ÑπÔ∏è")],
    ],
    resize_keyboard=True
)

# =========================
# ÿßÿ≥ÿ™ÿßÿ±ÿ™
# =========================
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    db.upsert_user(u.id, u.full_name or u.username or f"user-{u.id}")
    await update.effective_message.reply_text(
        "ÿ≥ŸÑÿßŸÖ! üëã ÿ®Ÿá ÿ±ÿ®ÿßÿ™ ÿ®ÿß€åŸà ⁄©ÿ±Ÿæ‚Äåÿ®ÿßÿ± ÿÆŸàÿ¥ ÿßŸàŸÖÿØ€å.\n"
        "ÿßÿ≤ ÿØ⁄©ŸÖŸá‚ÄåŸáÿß€å ÿ≤€åÿ± ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ:\n"
        "‚Ä¢ ŸÖŸÜŸà: ŸÜŸÖÿß€åÿ¥ ŸÖÿ≠ÿµŸàŸÑÿßÿ™\n"
        "‚Ä¢ ÿ≥ŸÅÿßÿ±ÿ¥: ŸÅÿß⁄©ÿ™Ÿàÿ±/ŸÜŸáÿß€å€å‚Äåÿ≥ÿßÿ≤€å ÿ≥ŸÅÿßÿ±ÿ¥\n"
        "‚Ä¢ ⁄©€åŸÅ ŸæŸàŸÑ: ŸÖÿ¥ÿßŸáÿØŸá/ÿ¥ÿßÿ±⁄òÿå ⁄©ÿ¥‚Äåÿ®⁄© €≥Ÿ™ ÿ®ÿπÿØ Ÿáÿ± ÿÆÿ±€åÿØ",
        reply_markup=MAIN_KB
    )

# =========================
# ŸÖŸÜŸà/ŸÖÿ≠ÿµŸàŸÑÿßÿ™
# =========================
def _products_keyboard(page: int = 1, page_size: int = 6):
    prods, total = db.list_products(page=page, page_size=page_size)
    rows = []
    for p in prods:
        text = f"{p['price']:,.0f}Ô∑º ‚Äî {p['name']}"
        rows.append([InlineKeyboardButton(text, callback_data=f"prod:{p['id']}")])

    # ŸÜÿßŸàÿ®ÿ±€å + ÿØ⁄©ŸÖŸá ŸÅÿß⁄©ÿ™Ÿàÿ±
    nav = []
    if page > 1:
        nav.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"pg:{page-1}"))
    nav.append(InlineKeyboardButton(f"{page}/{(total+page_size-1)//page_size or 1}", callback_data="noop"))
    if page * page_size < total:
        nav.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"pg:{page+1}"))
    if nav:
        rows.append(nav)

    rows.append([InlineKeyboardButton("ŸÖÿ¥ÿßŸáÿØŸá ŸÅÿß⁄©ÿ™Ÿàÿ± üßæ", callback_data="cart")])
    return InlineKeyboardMarkup(rows)

async def show_menu(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text("ŸÖŸÜŸà üç¨:", reply_markup=_products_keyboard(1))

# ŸáŸÜÿØŸÑ ⁄©ŸÑ€å⁄©‚ÄåŸáÿß ÿØÿ± ŸÖŸÜŸà (ŸÅ€å⁄©ÿ≥ + Ÿæ€åÿßŸÖ ÿ™ÿß€å€åÿØ€å)
async def menu_cb(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data
    try:
        if data.startswith("pg:"):
            page = int(data.split(":")[1])
            await q.answer()
            await q.edit_message_reply_markup(reply_markup=_products_keyboard(page))

        elif data.startswith("prod:"):
            pid = int(data.split(":")[1])
            p = db.get_product(pid)
            if not p:
                await q.answer("ŸÜÿßŸÖŸàÿ¨ŸàÿØ", show_alert=True)
                return

            u = db.get_user(update.effective_user.id)
            oid = db.open_draft_order(u["id"])
            db.add_or_increment_item(oid, p["id"], float(p["price"]), inc=1)

            await q.answer("‚úÖ ÿ®Ÿá ÿ≥ÿ®ÿØ ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØ")
            await q.message.reply_text(
                f"‚ûï ¬´{p['name']}¬ª ÿ®Ÿá ÿ≥ÿ®ÿØ ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØ.",
                disable_notification=True
            )

        elif data == "cart":
            await q.answer()
            await show_cart(update, ctx)

        else:
            await q.answer()

    except Exception as e:
        await q.answer("‚ùå ÿÆÿ∑ÿß€å ÿØÿßÿÆŸÑ€å. ÿØŸàÿ®ÿßÿ±Ÿá ÿ™ŸÑÿßÿ¥ ⁄©ŸÜ€åÿØ.", show_alert=True)
        log.exception("menu_cb error: %s", e)

# =========================
# ŸÅÿß⁄©ÿ™Ÿàÿ±/ÿ≥ÿ®ÿØ ÿÆÿ±€åÿØ
# =========================
def _cart_text(order, items):
    if not order or not items:
        return "üßæ ŸÅÿß⁄©ÿ™Ÿàÿ± ÿÆÿßŸÑ€å ÿßÿ≥ÿ™."
    lines = ["üßæ ŸÅÿß⁄©ÿ™Ÿàÿ±:"]
    for it in items:
        lines.append(f"‚Ä¢ {it['name']} √ó {it['qty']} = {int(it['line_total']):,} ÿ™ŸàŸÖÿßŸÜ")
    lines.append("‚Äî"*20)
    lines.append(f"ŸÖÿ¨ŸÖŸàÿπ: {int(order['total_amount']):,} ÿ™ŸàŸÖÿßŸÜ")
    return "\n".join(lines)

def _cart_keyboard(items):
    rows = []
    # ÿ®ÿ±ÿß€å Ÿáÿ± ŸÇŸÑŸÖ: ‚Äì [ŸÜÿßŸÖ√óÿ™ÿπÿØÿßÿØ] +
    for it in items:
        pid = it["product_id"]
        rows.append([
            InlineKeyboardButton("‚ûñ", callback_data=f"ci:-:{pid}"),
            InlineKeyboardButton(f"{it['name']} √ó {it['qty']}", callback_data="noop"),
            InlineKeyboardButton("‚ûï", callback_data=f"ci:+:{pid}")
        ])
        rows.append([InlineKeyboardButton("‚ùå ÿ≠ÿ∞ŸÅ", callback_data=f"ci:rm:{pid}")])

    rows.append([InlineKeyboardButton("ÿßÿØÿßŸÖŸá Ÿà Ÿæÿ±ÿØÿßÿÆÿ™ ‚úÖ", callback_data="checkout")])
    rows.append([InlineKeyboardButton("ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿ®Ÿá ŸÖŸÜŸà üç¨", callback_data="pg:1")])
    return InlineKeyboardMarkup(rows)

async def show_cart(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    u = db.get_user(update.effective_user.id)
    order, items = db.get_draft_with_items(u["id"])
    text = _cart_text(order, items)
    kb = _cart_keyboard(items) if items else None

    m = update.effective_message
    if update.callback_query:
        # ÿß⁄Øÿ± ÿßÿ≤ ŸÖŸÜŸà ÿ¢ŸÖÿØŸá‚Äåÿß€åŸÖÿå Ÿæ€åÿßŸÖ ŸÅÿπŸÑ€å ÿ±ÿß Ÿà€åÿ±ÿß€åÿ¥ ⁄©ŸÜ
        try:
            await m.edit_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
        except:
            await m.reply_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
    else:
        await m.reply_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)

async def cart_cb(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    try:
        u = db.get_user(update.effective_user.id)
        oid = db.open_draft_order(u["id"])

        _, action, pid_s = q.data.split(":")
        pid = int(pid_s)

        if action == "+":
            db.change_item_qty(oid, pid, +1)
            await q.answer("‚ûï ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØ")

        elif action == "-":
            changed = db.change_item_qty(oid, pid, -1)
            await q.answer("‚ûñ ⁄©ŸÖ ÿ¥ÿØ" if changed else "ÿ≠ÿ∞ŸÅ ÿ¥ÿØ")
        elif action == "rm":
            db.remove_item(oid, pid)
            await q.answer("üóë ÿ≠ÿ∞ŸÅ ÿ¥ÿØ")
        else:
            await q.answer()
            return

        # ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿ¢ŸÜ€å ŸÅÿß⁄©ÿ™Ÿàÿ±
        order, items = db.get_draft_with_items(u["id"])
        await q.message.edit_text(
            _cart_text(order, items),
            reply_markup=_cart_keyboard(items) if items else None,
            parse_mode=ParseMode.HTML
        )

    except Exception as e:
        await q.answer("‚ùå ÿÆÿ∑ÿß€å ÿØÿßÿÆŸÑ€å", show_alert=True)
        log.exception("cart_cb error: %s", e)

# =========================
# ÿ≥ŸÅÿßÿ±ÿ¥ (Ÿàÿ±ŸàÿØ ÿßÿ≤ ÿØ⁄©ŸÖŸá Ÿæÿß€å€åŸÜ€å)
# =========================
async def order_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await show_cart(update, ctx)

# =========================
# ⁄©€åŸÅ ŸæŸàŸÑ (ÿ≥ÿßÿØŸá)
# =========================
async def wallet(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    u = db.get_user(update.effective_user.id)
    bal = db.get_balance(u["id"])
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("ÿ¥ÿßÿ±⁄ò ⁄©ÿßÿ±ÿ™‚Äåÿ®Ÿá‚Äå⁄©ÿßÿ±ÿ™ üí≥", callback_data="topup")]
    ])
    await update.effective_message.reply_text(
        f"üí≥ ŸÖŸàÿ¨ŸàÿØ€å ÿ¥ŸÖÿß: {int(bal):,} ÿ™ŸàŸÖÿßŸÜ\n⁄©ÿ¥‚Äåÿ®⁄© ŸÅÿπÿßŸÑ: €≥Ÿ™",
        reply_markup=kb
    )

# =========================
# ÿ´ÿ®ÿ™ ŸáŸÜÿØŸÑÿ±Ÿáÿß
# =========================
def build_handlers():
    return [
        CommandHandler("start", start),
        MessageHandler(filters.Regex("^ŸÖŸÜŸà"), show_menu),
        MessageHandler(filters.Regex("^ÿ≥ŸÅÿßÿ±ÿ¥"), order_cmd),
        MessageHandler(filters.Regex("^⁄©€åŸÅ ŸæŸàŸÑ"), wallet),
        CallbackQueryHandler(menu_cb, pattern="^(pg:|prod:|cart$|noop$)"),
        CallbackQueryHandler(cart_cb, pattern="^ci:"),
    ]
