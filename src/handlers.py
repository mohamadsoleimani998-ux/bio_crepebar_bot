from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler, filters

from .base import log, tman, is_admin
from . import db

# -------- Keyboards --------
MAIN_KB = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üç≠ ŸÖŸÜŸà"), KeyboardButton("üßæ ÿ≥ŸÅÿßÿ±ÿ¥")],
        [KeyboardButton("üëõ ⁄©€åŸÅ ŸæŸàŸÑ"), KeyboardButton("üéÆ ÿ®ÿßÿ≤€å")],
        [KeyboardButton("‚òéÔ∏è ÿßÿ±ÿ™ÿ®ÿßÿ∑ ÿ®ÿß ŸÖÿß"), KeyboardButton("‚ÑπÔ∏è ÿ±ÿßŸáŸÜŸÖÿß")],
    ],
    resize_keyboard=True
)

def _pager_buttons(page, total, page_size, prefix):
    pages = max(1, (total + page_size - 1) // page_size)
    txt = f"{page}/{pages}"
    prev_btn = InlineKeyboardButton("‚¨ÖÔ∏è ŸÇÿ®ŸÑ€å", callback_data=f"{prefix}:pg:{max(1,page-1)}") if page > 1 else None
    next_btn = InlineKeyboardButton("ÿ®ÿπÿØ€å ‚û°Ô∏è", callback_data=f"{prefix}:pg:{min(pages,page+1)}") if page < pages else None
    row = [b for b in (prev_btn, InlineKeyboardButton(txt, callback_data="noop"), next_btn) if b]
    return row

# -------- Views --------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    db.upsert_user(u.id, u.full_name or u.first_name or "User")
    text = (
        "ÿ≥ŸÑÿßŸÖ! üëã ÿ®Ÿá ÿ±ÿ®ÿßÿ™ ÿ®ÿß€åŸà ⁄©ÿ±Ÿæ‚Äåÿ®ÿßÿ± ÿÆŸàÿ¥ ÿßŸàŸÖÿØ€å.\n"
        "ÿßÿ≤ ÿØ⁄©ŸÖŸá‚ÄåŸáÿß€å ÿ≤€åÿ± ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ:\n"
        "‚Ä¢ ŸÖŸÜŸà üç≠: ŸÜŸÖÿß€åÿ¥ ŸÖÿ≠ÿµŸàŸÑÿßÿ™ ÿ®ÿß ŸÜÿßŸÖ Ÿà ŸÇ€åŸÖÿ™\n"
        "‚Ä¢ ÿ≥ŸÅÿßÿ±ÿ¥ üßæ: ÿ´ÿ®ÿ™ ÿ≥ŸÅÿßÿ±ÿ¥ Ÿà ŸÖÿ¥ÿßŸáÿØŸá ŸÅÿß⁄©ÿ™Ÿàÿ±\n"
        "‚Ä¢ ⁄©€åŸÅ ŸæŸàŸÑ üëõ: ŸÖŸàÿ¨ŸàÿØ€å/ÿ¥ÿßÿ±⁄ò Ÿà ⁄©ÿ¥‚Äåÿ®⁄© €≥Ÿ™ ÿ®ÿπÿØ Ÿáÿ± ÿÆÿ±€åÿØ\n"
        "‚Ä¢ ÿ®ÿßÿ≤€å üéÆ: ÿ≥ÿ±⁄Øÿ±ŸÖ€å\n"
        "‚Ä¢ ÿßÿ±ÿ™ÿ®ÿßÿ∑ ÿ®ÿß ŸÖÿß ‚òéÔ∏è: Ÿæ€åÿßŸÖ ÿ®Ÿá ÿßÿØŸÖ€åŸÜ\n"
        "‚Ä¢ ÿ±ÿßŸáŸÜŸÖÿß ‚ÑπÔ∏è: ÿØÿ≥ÿ™Ÿàÿ±ÿßÿ™"
    )
    await update.effective_message.reply_text(text, reply_markup=MAIN_KB)

# ---- Wallet
async def on_wallet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg = update.effective_user.id
    rec = db.get_user(tg)
    if not rec:
        await update.effective_message.reply_text("⁄©ÿßÿ±ÿ®ÿ± €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
        return
    text = f"ŸÖŸàÿ¨ŸàÿØ€å ÿ¥ŸÖÿß: {tman(rec['balance'])}\n⁄©ÿ¥‚Äåÿ®⁄© ŸÅÿπÿßŸÑ: €≥Ÿ™"
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("ÿ¥ÿßÿ±⁄ò ⁄©ÿßÿ±ÿ™‚Äåÿ®Ÿá‚Äå⁄©ÿßÿ±ÿ™ üßæ", callback_data="wallet:topup")]])
    await update.effective_message.reply_text(text, reply_markup=kb)

# ---- Menu (products list as buttons)
PAGE_SIZE = 6

async def on_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, page:int=1):
    prods, total = db.list_products(page=page, page_size=PAGE_SIZE)
    if not prods:
        await update.effective_message.reply_text("ŸáŸÜŸàÿ≤ ŸÖÿ≠ÿµŸàŸÑ ŸÅÿπÿßŸÑ€å ÿ´ÿ®ÿ™ ŸÜÿ¥ÿØŸá.")
        return
    rows = []
    for p in prods:
        rows.append([InlineKeyboardButton(f"{tman(p['price'])} ‚Äî {p['name']}", callback_data=f"prod:{p['id']}")])
    rows.append(_pager_buttons(page, total, PAGE_SIZE, "menu"))
    rows.append([InlineKeyboardButton("üßæ ŸÖÿ¥ÿßŸáÿØŸá ŸÅÿß⁄©ÿ™Ÿàÿ±", callback_data="order:invoice")])
    await update.effective_message.reply_text("ŸÖŸÜŸà:", reply_markup=InlineKeyboardMarkup(rows))

# ---- Order / Cart
def _invoice_text(order, items):
    if not order or not items:
        return "ÿ≥ÿ®ÿØ ÿÆÿ±€åÿØ ÿÆÿßŸÑ€å ÿßÿ≥ÿ™."
    lines = ["üßæ ŸÅÿß⁄©ÿ™Ÿàÿ±:", ""]
    s = 0
    for it in items:
        lines.append(f"{it['name']} √ó {it['qty']} = {tman(it['line_total'])}")
        s += float(it["line_total"])
    lines += ["", f"ÿ¨ŸÖÿπ ⁄©ŸÑ: {tman(order['total_amount'])}"]
    return "\n".join(lines)

async def on_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = db.get_user(update.effective_user.id)
    order, items = db.get_draft_with_items(u["id"])
    txt = _invoice_text(order, items)
    kb = []
    if items:
        kb.append([InlineKeyboardButton("‚úÖ ÿ™ÿ≥Ÿà€åŸá ÿßÿ≤ ⁄©€åŸÅ ŸæŸàŸÑ", callback_data="pay:wallet")])
        kb.append([InlineKeyboardButton("üí≥ Ÿæÿ±ÿØÿßÿÆÿ™ ŸÖÿ≥ÿ™ŸÇ€åŸÖ (ÿØŸÖŸà)", url="https://example.com/pay")])
    kb.append([InlineKeyboardButton("ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿ®Ÿá ŸÖŸÜŸà üç≠", callback_data="menu:pg:1")])
    await update.effective_message.reply_text(txt, reply_markup=InlineKeyboardMarkup(kb))

# ---- Callbacks
async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data or ""
    await q.answer()
    # menu pagination
    if data.startswith("menu:pg:"):
        page = int(data.split(":")[-1])
        await on_menu(update, context, page)
        return
    # show invoice
    if data == "order:invoice":
        await on_invoice(update, context)
        return
    # select product
    if data.startswith("prod:"):
        pid = int(data.split(":")[1])
        prod = db.get_product(pid)
        if not prod:
            await q.edit_message_text("ÿß€åŸÜ ŸÖÿ≠ÿµŸàŸÑ ÿØ€å⁄Øÿ± ÿØÿ± ÿØÿ≥ÿ™ÿ±ÿ≥ ŸÜ€åÿ≥ÿ™.")
            return
        # add to cart
        u = db.get_user(update.effective_user.id)
        oid = db.open_draft_order(u["id"])
        db.add_or_increment_item(oid, pid, float(prod["price"]), 1)
        await q.edit_message_text(f"‚úÖ ¬´{prod['name']}¬ª ÿ®Ÿá ÿ≥ÿ®ÿØ ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØ.\n"
                                  f"ŸÇ€åŸÖÿ™: {tman(prod['price'])}",
                                  reply_markup=InlineKeyboardMarkup([
                                      [InlineKeyboardButton("‚ûï €å⁄©€å ÿØ€å⁄ØŸá", callback_data=f"prod:{pid}")],
                                      [InlineKeyboardButton("üßæ ŸÖÿ¥ÿßŸáÿØŸá ŸÅÿß⁄©ÿ™Ÿàÿ±", callback_data="order:invoice")],
                                      [InlineKeyboardButton("‚¨ÖÔ∏è ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿ®Ÿá ŸÖŸÜŸà", callback_data="menu:pg:1")]
                                  ]))
        return
    # wallet pay (demo: ŸÅŸÇÿ∑ ÿßÿ≤ ŸÖŸàÿ¨ŸàÿØ€å ⁄©ŸÖ ŸÖ€å‚Äå⁄©ŸÜ€åŸÖ Ÿà ÿ≥ŸÅÿßÿ±ÿ¥ ÿ±ÿß paid ŸÜŸÖ€å‚Äå⁄©ŸÜ€åŸÖ ⁄©ÿßŸÖŸÑ)
    if data == "pay:wallet":
        u = db.get_user(update.effective_user.id)
        order, items = db.get_draft_with_items(u["id"])
        if not order or not items:
            await q.edit_message_text("ÿ≥ÿ®ÿØ ÿÆÿßŸÑ€å ÿßÿ≥ÿ™.")
            return
        bal = db.get_balance(u["id"])
        total = float(order["total_amount"])
        if bal < total:
            await q.edit_message_text("ŸÖŸàÿ¨ŸàÿØ€å ⁄©€åŸÅ ŸæŸàŸÑ ⁄©ÿßŸÅ€å ŸÜ€åÿ≥ÿ™. ÿßÿ®ÿ™ÿØÿß ÿ¥ÿßÿ±⁄ò ⁄©ŸÜ€åÿØ.")
            return
        # ÿ´ÿ®ÿ™ ÿ™ÿ±ÿß⁄©ŸÜÿ¥ ŸÖŸÜŸÅ€å
        from psycopg2 import sql
        with db._conn() as cn, cn.cursor() as cur:
            cur.execute("""INSERT INTO wallet_transactions(user_id, kind, amount, meta)
                           VALUES (%s,'order', %s * -1, jsonb_build_object('order_id',%s))""",
                        (u["id"], total, order["order_id"]))
            # ÿ≥ŸÅÿßÿ±ÿ¥ ÿ±ÿß paid
            cur.execute("UPDATE orders SET status='paid' WHERE order_id=%s", (order["order_id"],))
        await q.edit_message_text("‚úÖ Ÿæÿ±ÿØÿßÿÆÿ™ ÿßÿ≤ ⁄©€åŸÅ ŸæŸàŸÑ ÿßŸÜÿ¨ÿßŸÖ ÿ¥ÿØ. ŸÖŸÖŸÜŸàŸÜ! ‚ú®")
        return

    # ignore
    if data == "noop":
        return

# ---- Text router
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (update.effective_message.text or "").strip()
    if txt in ("ŸÖŸÜŸà", "üç≠ ŸÖŸÜŸà"):
        await on_menu(update, context, 1)
    elif txt in ("ÿ≥ŸÅÿßÿ±ÿ¥", "üßæ ÿ≥ŸÅÿßÿ±ÿ¥"):
        await on_invoice(update, context)
    elif txt in ("⁄©€åŸÅ ŸæŸàŸÑ", "üëõ ⁄©€åŸÅ ŸæŸàŸÑ"):
        await on_wallet(update, context)
    elif txt in ("ÿ®ÿßÿ≤€å", "üéÆ ÿ®ÿßÿ≤€å"):
        await update.effective_message.reply_text("ÿ®Ÿá‚Äåÿ≤ŸàÿØ€å...")
    elif txt in ("ÿ±ÿßŸáŸÜŸÖÿß", "‚ÑπÔ∏è ÿ±ÿßŸáŸÜŸÖÿß"):
        await update.effective_message.reply_text("ÿßÿ≤ ÿØ⁄©ŸÖŸá‚ÄåŸáÿß ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜÿõ ŸáŸÖŸá‚Äå⁄Ü€åÿ≤ Ÿàÿßÿ∂ÿ≠Ÿá ü§ù")
    else:
        await update.effective_message.reply_text("⁄Øÿ≤€åŸÜŸá‚Äåÿß€å ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ:", reply_markup=MAIN_KB)

def build_handlers():
    return [
        CommandHandler("start", cmd_start),
        CallbackQueryHandler(on_cb),
        MessageHandler(filters.TEXT & ~filters.COMMAND, on_text),
    ]
